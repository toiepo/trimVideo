import android.media.MediaMetadataRetriever;
import android.media.MediaRecorder;

import java.io.File;
import java.io.IOException;

public class VideoTrimmer {

    public static void trimVideo(String inputVideoPath, String outputVideoPath, long startMs, long endMs) throws IOException {
        MediaMetadataRetriever retriever = new MediaMetadataRetriever();
        retriever.setDataSource(inputVideoPath);

        // Determine the duration of the video
        String durationStr = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
        long duration = Long.parseLong(durationStr);

        // Ensure startMs and endMs are within bounds
        if (startMs < 0) {
            startMs = 0;
        }
        if (endMs > duration) {
            endMs = duration;
        }

        // Initialize MediaRecorder
        MediaRecorder recorder = new MediaRecorder();
        recorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
        recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
        recorder.setOutputFile(outputVideoPath);
        recorder.setVideoEncodingBitRate(10000000);
        recorder.setVideoFrameRate(30);
        recorder.setVideoSize(1280, 720);
        recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);

        // Configure start time and duration for recording
        recorder.setStartTime(startMs * 1000);
        recorder.setMaxDuration((endMs - startMs) * 1000);

        // Prepare and start recording
        try {
            recorder.prepare();
        } catch (IOException e) {
            e.printStackTrace();
        }
        recorder.start();

        // Stop recording
        try {
            Thread.sleep(endMs - startMs);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        recorder.stop();
        recorder.reset();
        recorder.release();
    }
}
