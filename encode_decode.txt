public class VideoAudioTranscoder {

    private static final int TIMEOUT_USEC = 10000; // Timeout for buffer operations

    private MediaCodec videoDecoder;
    private MediaCodec videoEncoder;
    private MediaCodec audioDecoder;
    private MediaCodec audioEncoder;
    private MediaExtractor videoExtractor;
    private MediaExtractor audioExtractor;

    public void transcodeVideoAndAudio(String videoFilePath, Surface surface) throws IOException {
        videoExtractor = new MediaExtractor();
        videoExtractor.setDataSource(videoFilePath);

        audioExtractor = new MediaExtractor();
        audioExtractor.setDataSource(videoFilePath);

        int videoTrackIndex = selectTrack(videoExtractor, "video/");
        int audioTrackIndex = selectTrack(audioExtractor, "audio/");

        videoExtractor.selectTrack(videoTrackIndex);
        audioExtractor.selectTrack(audioTrackIndex);

        MediaFormat videoFormat = videoExtractor.getTrackFormat(videoTrackIndex);
        MediaFormat audioFormat = audioExtractor.getTrackFormat(audioTrackIndex);

        videoDecoder = MediaCodec.createDecoderByType(videoFormat.getString(MediaFormat.KEY_MIME));
        videoDecoder.configure(videoFormat, surface, null, 0);

        MediaFormat videoOutputFormat = MediaFormat.createVideoFormat("video/avc", videoFormat.getInteger(MediaFormat.KEY_WIDTH), videoFormat.getInteger(MediaFormat.KEY_HEIGHT));
        videoOutputFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Flexible);
        videoOutputFormat.setInteger(MediaFormat.KEY_BIT_RATE, 1000000); // Example bitrate
        videoOutputFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 30); // Example frame rate
        videoOutputFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 1); // Example I-frame interval

        videoEncoder = MediaCodec.createEncoderByType("video/avc");
        videoEncoder.configure(videoOutputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);

        audioDecoder = MediaCodec.createDecoderByType(audioFormat.getString(MediaFormat.KEY_MIME));
        audioDecoder.configure(audioFormat, null, null, 0);

        MediaFormat audioOutputFormat = MediaFormat.createAudioFormat("audio/mp4a-latm", audioFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE), audioFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT));
        audioOutputFormat.setInteger(MediaFormat.KEY_BIT_RATE, 64000); // Example bitrate

        audioEncoder = MediaCodec.createEncoderByType("audio/mp4a-latm");
        audioEncoder.configure(audioOutputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);

        videoDecoder.setCallback(new MediaCodec.Callback() {
            @Override
            public void onInputBufferAvailable(MediaCodec codec, int index) {
                ByteBuffer inputBuffer = codec.getInputBuffer(index);
                int sampleSize = videoExtractor.readSampleData(inputBuffer, 0);
                if (sampleSize < 0) {
                    codec.queueInputBuffer(index, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
                } else {
                    long presentationTimeUs = videoExtractor.getSampleTime();
                    codec.queueInputBuffer(index, 0, sampleSize, presentationTimeUs, 0);
                    videoExtractor.advance();
                }
            }

            @Override
            public void onOutputBufferAvailable(MediaCodec codec, int index, MediaCodec.BufferInfo info) {
                ByteBuffer outputBuffer = codec.getOutputBuffer(index);
                if (info.size > 0) {
                    outputBuffer.position(info.offset);
                    outputBuffer.limit(info.offset + info.size);
                    encodeVideo(outputBuffer, info);
                }
                codec.releaseOutputBuffer(index, false);
            }

            @Override
            public void onError(MediaCodec codec, MediaCodec.CodecException e) {
                e.printStackTrace();
            }

            @Override
            public void onOutputFormatChanged(MediaCodec codec, MediaFormat format) {
                // Handle format change if necessary
            }
        });

        audioDecoder.setCallback(new MediaCodec.Callback() {
            @Override
            public void onInputBufferAvailable(MediaCodec codec, int index) {
                ByteBuffer inputBuffer = codec.getInputBuffer(index);
                int sampleSize = audioExtractor.readSampleData(inputBuffer, 0);
                if (sampleSize < 0) {
                    codec.queueInputBuffer(index, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
                } else {
                    long presentationTimeUs = audioExtractor.getSampleTime();
                    codec.queueInputBuffer(index, 0, sampleSize, presentationTimeUs, 0);
                    audioExtractor.advance();
                }
            }

            @Override
            public void onOutputBufferAvailable(MediaCodec codec, int index, MediaCodec.BufferInfo info) {
                ByteBuffer outputBuffer = codec.getOutputBuffer(index);
                if (info.size > 0) {
                    outputBuffer.position(info.offset);
                    outputBuffer.limit(info.offset + info.size);
                    encodeAudio(outputBuffer, info);
                }
                codec.releaseOutputBuffer(index, false);
            }

            @Override
            public void onError(MediaCodec codec, MediaCodec.CodecException e) {
                e.printStackTrace();
            }

            @Override
            public void onOutputFormatChanged(MediaCodec codec, MediaFormat format) {
                // Handle format change if necessary
            }
        });

        videoEncoder.setCallback(new MediaCodec.Callback() {
            @Override
            public void onInputBufferAvailable(MediaCodec codec, int index) {
                // Handle input buffer availability for encoding
            }

            @Override
            public void onOutputBufferAvailable(MediaCodec codec, int index, MediaCodec.BufferInfo info) {
                ByteBuffer outputBuffer = codec.getOutputBuffer(index);
                if (info.size > 0) {
                    outputBuffer.position(info.offset);
                    outputBuffer.limit(info.offset + info.size);
                    // Write encoded video data to file or further processing
                }
                codec.releaseOutputBuffer(index, false);
            }

            @Override
            public void onError(MediaCodec codec, MediaCodec.CodecException e) {
                e.printStackTrace();
            }

            @Override
            public void onOutputFormatChanged(MediaCodec codec, MediaFormat format) {
                // Handle format change if necessary
            }
        });

        audioEncoder.setCallback(new MediaCodec.Callback() {
            @Override
            public void onInputBufferAvailable(MediaCodec codec, int index) {
                // Handle input buffer availability for encoding
            }

            @Override
            public void onOutputBufferAvailable(MediaCodec codec, int index, MediaCodec.BufferInfo info) {
                ByteBuffer outputBuffer = codec.getOutputBuffer(index);
                if (info.size > 0) {
                    outputBuffer.position(info.offset);
                    outputBuffer.limit(info.offset + info.size);
                    // Write encoded audio data to file or further processing
                }
                codec.releaseOutputBuffer(index, false);
            }

            @Override
            public void onError(MediaCodec codec, MediaCodec.CodecException e) {
                e.printStackTrace();
            }

            @Override
            public void onOutputFormatChanged(MediaCodec codec, MediaFormat format) {
                // Handle format change if necessary
            }
        });

        videoDecoder.start();
        videoEncoder.start();

        audioDecoder.start();
        audioEncoder.start();
    }

    private int selectTrack(MediaExtractor extractor, String mimePrefix) {
        for (int i = 0; i < extractor.getTrackCount(); i++) {
            MediaFormat format = extractor.getTrackFormat(i);
            String mime = format.getString(MediaFormat.KEY_MIME);
            if (mime.startsWith(mimePrefix)) {
                return i;
            }
        }
        throw new IllegalArgumentException("No " + mimePrefix + " track found in " + extractor);
    }

    private void encodeVideo(ByteBuffer buffer, MediaCodec.BufferInfo info) {
        int inputBufferIndex = videoEncoder.dequeueInputBuffer(TIMEOUT_USEC);
        if (inputBufferIndex >= 0) {
            ByteBuffer inputBuffer = videoEncoder.getInputBuffer(inputBufferIndex);
            inputBuffer.clear();
            inputBuffer.put(buffer);
            videoEncoder.queueInputBuffer(inputBufferIndex, 0, info.size, info.presentationTimeUs, info.flags);
        }
    }

    private void encodeAudio(ByteBuffer buffer, MediaCodec.BufferInfo info) {
        int inputBufferIndex = audioEncoder.dequeueInputBuffer(TIMEOUT_USEC);
        if (inputBufferIndex >= 0) {
            ByteBuffer inputBuffer = audioEncoder.getInputBuffer(inputBufferIndex);
            inputBuffer.clear();
            inputBuffer.put(buffer);
            audioEncoder.queueInputBuffer(inputBufferIndex, 0, info.size, info.presentationTimeUs, info.flags);
        }
    }
}
